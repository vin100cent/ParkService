# Author: Vince Tran
# Date: 02/25/2024
# Description: This file interacts with the NPS API to retrieve information about parks and their campgrounds

from dotenv import load_dotenv

import os
import requests
import random

load_dotenv()
API_KEY = os.getenv("NPS_API_KEY")

PARK_CODES = [
    "abli",
    "acad",
    "adam",
    "afbg",
    "agfo",
    "alfl",
    "alpo",
    "amis",
    "ande",
    "anjo",
    "ania",
    "anti",
    "apis",
    "appa",
    "apco",
    "arch",
    "arpo",
    "arho",
    "asis",
    "azru",
    "badl",
    "band",
    "bepa",
    "beol",
    "bela",
    "bibe",
    "bicy",
    "biho",
    "biso",
    "bith",
    "bica",
    "bicr",
    "bisc",
    "blca",
    "blrv",
    "blri",
    "blue",
    "bowa",
    "bost",
    "boaf",
    "boha",
    "brcr",
    "brvb",
    "brca",
    "buis",
    "buff",
    "cana",
    "cari",
    "cach",
    "cany",
    "caco",
    "caha",
    "cakr",
    "calo",
    "care",
    "cavo",
    "carl",
    "cave",
    "cawo",
    "cagr",
    "casa",
    "cacl",
    "camo",
    "cato",
    "cebr",
    "cebe",
    "cech",
    "chis",
    "chcu",
    "cham",
    "chpi",
    "chyo",
    "chat",
    "choh",
    "chch",
    "chic",
    "chir",
    "chri",
    "ciro",
    "clba",
    "colo",
    "colm",
    "colt",
    "cong",
    "coga",
    "coro",
    "cowp",
    "crla",
    "crmo",
    "cuga",
    "cuis",
    "cure",
    "cuva",
    "daav",
    "deva",
    "deso",
    "dewa",
    "dena",
    "deto",
    "dino",
    "depo",
    "drto",
    "ebla",
    "edal",
    "efmo",
    "eise",
    "elma",
    "elmo",
    "elro",
    "euon",
    "ever",
    "feha",
    "fiis",
    "fila",
    "frst",
    "flni",
    "flfo",
    "foth",
    "fobo",
    "foca",
    "foda",
    "fodo",
    "fofr",
    "fola",
    "fols",
    "foma",
    "fomc",
    "fomr",
    "fone",
    "fopo",
    "fopu",
    "fora",
    "fosc",
    "fosm",
    "fost",
    "fosu",
    "foun",
    "fous",
    "fova",
    "fowa",
    "fobu",
    "frde",
    "frdo",
    "frla",
    "frsp",
    "frri",
    "frhi",
    "gaar",
    "gate",
    "jeff",
    "gari",
    "gegr",
    "gero",
    "gewa",
    "gwca",
    "gwmp",
    "gett",
    "gicl",
    "glac",
    "glba",
    "glca",
    "goga",
    "gosp",
    "gois",
    "grca",
    "para",
    "grpo",
    "grte",
    "grko",
    "grba",
    "greg",
    "grsa",
    "grsm",
    "gree",
    "gumo",
    "guco",
    "guis",
    "hafo",
    "hale",
    "hagr",
    "hamp",
    "hafe",
    "hart",
    "hatu",
    "hstr",
    "havo",
    "heho",
    "pima",
    "hofr",
    "home",
    "hono",
    "hocu",
    "hofu",
    "hobe",
    "hosp",
    "hove",
    "hutr",
    "inde",
    "indu",
    "isro",
    "jaga",
    "jela",
    "jeca",
    "jica",
    "joda",
    "jodr",
    "jofi",
    "jomu",
    "jofl",
    "jotr",
    "kala",
    "kaho",
    "kaww",
    "katm",
    "kefj",
    "kemo",
    "kewe",
    "seki",
    "kimo",
    "klse",
    "knri",
    "kova",
    "kowa",
    "lach",
    "lacl",
    "lake",
    "laro",
    "lavo",
    "labe",
    "lamr",
    "focl",
    "lime",
    "libo",
    "liho",
    "libi",
    "liri",
    "chsc",
    "long",
    "lowe",
    "lyjo",
    "gwmp",
    "mawa",
    "maca",
    "mana",
    "mapr",
    "manz",
    "mabi",
    "malu",
    "mava",
    "mamc",
    "meve",
    "mima",
    "mimi",
    "miss",
    "mnrr",
    "moja",
    "mono",
    "moca",
    "mocr",
    "morr",
    "mora",
    "moru",
    "muwo",
    "natc",
    "natr",
    "nama",
    "nace",
    "miin",
    "npsa",
    "nabr",
    "nava",
    "nebe",
    "jazz",
    "neri",
    "nepe",
    "nico",
    "nisi",
    "niob",
    "noat",
    "noca",
    "obri",
    "ocmu",
    "olym",
    "orca",
    "orpi",
    "ovvi",
    "ozar",
    "pais",
    "paal",
    "para",
    "pagr",
    "peri",
    "perl",
    "peco",
    "paav",
    "pevi",
    "pete",
    "pefo",
    "petr",
    "piro",
    "pisp",
    "pipe",
    "pinn",
    "pisc",
    "pore",
    "puho",
    "puhe",
    "poch",
    "poht",
    "popo",
    "prwi",
    "pull",
    "rabr",
    "reer",
    "redw",
    "rich",
    "rigr",
    "rira",
    "rocr",
    "romo",
    "rowi",
    "rori",
    "rola",
    "ruca",
    "sahi",
    "sagu",
    "sacn",
    "sacr",
    "sapa",
    "saga",
    "sama",
    "sapu",
    "sari",
    "saan",
    "safr",
    "samo",
    "saju",
    "sajh",
    "seki",
    "sand",
    "sara",
    "sair",
    "scbl",
    "semo",
    "shen",
    "shil",
    "sitk",
    "slbe",
    "spar",
    "stli",
    "stea",
    "stri",
    "ston",
    "sucr",
    "tapr",
    "thko",
    "thro",
    "thrb",
    "this",
    "edis",
    "thje",
    "thst",
    "tica",
    "timu",
    "tont",
    "tule",
    "tusk",
    "tuma",
    "tupe",
    "tuai",
    "tuin",
    "tuzi",
    "ulsg",
    "upde",
    "vall",
    "vafo",
    "vama",
    "vick",
    "vive",
    "viis",
    "vicr",
    "voya",
    "waco",
    "waca",
    "wapa",
    "wamo",
]


def getParkData(parkCode):
    params = {"parkCode": parkCode, "api_key": API_KEY}
    response = requests.get("https://developer.nps.gov/api/v1/parks", params=params)
    response.raise_for_status()
    return response.json()


def getParkName(parkCode):
    if not parkCode:
        parkCode = random.choice(PARK_CODES)
    parkData = getParkData(parkCode)
    fullName = parkData["data"][0]["fullName"]
    # remove endings from park names
    for ending in [
        "National Park",
        "National Historical Park",
    ]:  # add any other endings here to remove
        fullName = fullName.replace(ending, "")
    shortName = fullName.strip()
    return shortName
